"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@giscus";
exports.ids = ["vendor-chunks/@giscus"];
exports.modules = {

/***/ "(ssr)/./node_modules/@giscus/react/dist/giscus-BNK3dBIH.js":
/*!************************************************************!*\
  !*** ./node_modules/@giscus/react/dist/giscus-BNK3dBIH.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GiscusWidget: () => (/* binding */ p)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst H = globalThis, V = H.ShadowRoot && (H.ShadyCSS === void 0 || H.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype, q = Symbol(), J = /* @__PURE__ */ new WeakMap();\nlet ot = class {\n  constructor(t, e, s) {\n    if (this._$cssResult$ = !0, s !== q)\n      throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n    this.cssText = t, this.t = e;\n  }\n  get styleSheet() {\n    let t = this.o;\n    const e = this.t;\n    if (V && t === void 0) {\n      const s = e !== void 0 && e.length === 1;\n      s && (t = J.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), s && J.set(e, t));\n    }\n    return t;\n  }\n  toString() {\n    return this.cssText;\n  }\n};\nconst ut = (i) => new ot(typeof i == \"string\" ? i : i + \"\", void 0, q), $t = (i, ...t) => {\n  const e = i.length === 1 ? i[0] : t.reduce((s, r, o) => s + ((n) => {\n    if (n._$cssResult$ === !0)\n      return n.cssText;\n    if (typeof n == \"number\")\n      return n;\n    throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + n + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n  })(r) + i[o + 1], i[0]);\n  return new ot(e, i, q);\n}, _t = (i, t) => {\n  if (V)\n    i.adoptedStyleSheets = t.map((e) => e instanceof CSSStyleSheet ? e : e.styleSheet);\n  else\n    for (const e of t) {\n      const s = document.createElement(\"style\"), r = H.litNonce;\n      r !== void 0 && s.setAttribute(\"nonce\", r), s.textContent = e.cssText, i.appendChild(s);\n    }\n}, F = V ? (i) => i : (i) => i instanceof CSSStyleSheet ? ((t) => {\n  let e = \"\";\n  for (const s of t.cssRules)\n    e += s.cssText;\n  return ut(e);\n})(i) : i;\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst { is: gt, defineProperty: ft, getOwnPropertyDescriptor: mt, getOwnPropertyNames: At, getOwnPropertySymbols: yt, getPrototypeOf: St } = Object, A = globalThis, Q = A.trustedTypes, vt = Q ? Q.emptyScript : \"\", Y = A.reactiveElementPolyfillSupport, U = (i, t) => i, L = { toAttribute(i, t) {\n  switch (t) {\n    case Boolean:\n      i = i ? vt : null;\n      break;\n    case Object:\n    case Array:\n      i = i == null ? i : JSON.stringify(i);\n  }\n  return i;\n}, fromAttribute(i, t) {\n  let e = i;\n  switch (t) {\n    case Boolean:\n      e = i !== null;\n      break;\n    case Number:\n      e = i === null ? null : Number(i);\n      break;\n    case Object:\n    case Array:\n      try {\n        e = JSON.parse(i);\n      } catch {\n        e = null;\n      }\n  }\n  return e;\n} }, K = (i, t) => !gt(i, t), Z = { attribute: !0, type: String, converter: L, reflect: !1, hasChanged: K };\nSymbol.metadata ?? (Symbol.metadata = Symbol(\"metadata\")), A.litPropertyMetadata ?? (A.litPropertyMetadata = /* @__PURE__ */ new WeakMap());\nclass E extends HTMLElement {\n  static addInitializer(t) {\n    this._$Ei(), (this.l ?? (this.l = [])).push(t);\n  }\n  static get observedAttributes() {\n    return this.finalize(), this._$Eh && [...this._$Eh.keys()];\n  }\n  static createProperty(t, e = Z) {\n    if (e.state && (e.attribute = !1), this._$Ei(), this.elementProperties.set(t, e), !e.noAccessor) {\n      const s = Symbol(), r = this.getPropertyDescriptor(t, s, e);\n      r !== void 0 && ft(this.prototype, t, r);\n    }\n  }\n  static getPropertyDescriptor(t, e, s) {\n    const { get: r, set: o } = mt(this.prototype, t) ?? { get() {\n      return this[e];\n    }, set(n) {\n      this[e] = n;\n    } };\n    return { get() {\n      return r == null ? void 0 : r.call(this);\n    }, set(n) {\n      const a = r == null ? void 0 : r.call(this);\n      o.call(this, n), this.requestUpdate(t, a, s);\n    }, configurable: !0, enumerable: !0 };\n  }\n  static getPropertyOptions(t) {\n    return this.elementProperties.get(t) ?? Z;\n  }\n  static _$Ei() {\n    if (this.hasOwnProperty(U(\"elementProperties\")))\n      return;\n    const t = St(this);\n    t.finalize(), t.l !== void 0 && (this.l = [...t.l]), this.elementProperties = new Map(t.elementProperties);\n  }\n  static finalize() {\n    if (this.hasOwnProperty(U(\"finalized\")))\n      return;\n    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(U(\"properties\"))) {\n      const e = this.properties, s = [...At(e), ...yt(e)];\n      for (const r of s)\n        this.createProperty(r, e[r]);\n    }\n    const t = this[Symbol.metadata];\n    if (t !== null) {\n      const e = litPropertyMetadata.get(t);\n      if (e !== void 0)\n        for (const [s, r] of e)\n          this.elementProperties.set(s, r);\n    }\n    this._$Eh = /* @__PURE__ */ new Map();\n    for (const [e, s] of this.elementProperties) {\n      const r = this._$Eu(e, s);\n      r !== void 0 && this._$Eh.set(r, e);\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n  }\n  static finalizeStyles(t) {\n    const e = [];\n    if (Array.isArray(t)) {\n      const s = new Set(t.flat(1 / 0).reverse());\n      for (const r of s)\n        e.unshift(F(r));\n    } else\n      t !== void 0 && e.push(F(t));\n    return e;\n  }\n  static _$Eu(t, e) {\n    const s = e.attribute;\n    return s === !1 ? void 0 : typeof s == \"string\" ? s : typeof t == \"string\" ? t.toLowerCase() : void 0;\n  }\n  constructor() {\n    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();\n  }\n  _$Ev() {\n    var t;\n    this._$ES = new Promise((e) => this.enableUpdating = e), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (t = this.constructor.l) == null || t.forEach((e) => e(this));\n  }\n  addController(t) {\n    var e;\n    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t), this.renderRoot !== void 0 && this.isConnected && ((e = t.hostConnected) == null || e.call(t));\n  }\n  removeController(t) {\n    var e;\n    (e = this._$EO) == null || e.delete(t);\n  }\n  _$E_() {\n    const t = /* @__PURE__ */ new Map(), e = this.constructor.elementProperties;\n    for (const s of e.keys())\n      this.hasOwnProperty(s) && (t.set(s, this[s]), delete this[s]);\n    t.size > 0 && (this._$Ep = t);\n  }\n  createRenderRoot() {\n    const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n    return _t(t, this.constructor.elementStyles), t;\n  }\n  connectedCallback() {\n    var t;\n    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), (t = this._$EO) == null || t.forEach((e) => {\n      var s;\n      return (s = e.hostConnected) == null ? void 0 : s.call(e);\n    });\n  }\n  enableUpdating(t) {\n  }\n  disconnectedCallback() {\n    var t;\n    (t = this._$EO) == null || t.forEach((e) => {\n      var s;\n      return (s = e.hostDisconnected) == null ? void 0 : s.call(e);\n    });\n  }\n  attributeChangedCallback(t, e, s) {\n    this._$AK(t, s);\n  }\n  _$EC(t, e) {\n    var o;\n    const s = this.constructor.elementProperties.get(t), r = this.constructor._$Eu(t, s);\n    if (r !== void 0 && s.reflect === !0) {\n      const n = (((o = s.converter) == null ? void 0 : o.toAttribute) !== void 0 ? s.converter : L).toAttribute(e, s.type);\n      this._$Em = t, n == null ? this.removeAttribute(r) : this.setAttribute(r, n), this._$Em = null;\n    }\n  }\n  _$AK(t, e) {\n    var o;\n    const s = this.constructor, r = s._$Eh.get(t);\n    if (r !== void 0 && this._$Em !== r) {\n      const n = s.getPropertyOptions(r), a = typeof n.converter == \"function\" ? { fromAttribute: n.converter } : ((o = n.converter) == null ? void 0 : o.fromAttribute) !== void 0 ? n.converter : L;\n      this._$Em = r, this[r] = a.fromAttribute(e, n.type), this._$Em = null;\n    }\n  }\n  requestUpdate(t, e, s) {\n    if (t !== void 0) {\n      if (s ?? (s = this.constructor.getPropertyOptions(t)), !(s.hasChanged ?? K)(this[t], e))\n        return;\n      this.P(t, e, s);\n    }\n    this.isUpdatePending === !1 && (this._$ES = this._$ET());\n  }\n  P(t, e, s) {\n    this._$AL.has(t) || this._$AL.set(t, e), s.reflect === !0 && this._$Em !== t && (this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Set())).add(t);\n  }\n  async _$ET() {\n    this.isUpdatePending = !0;\n    try {\n      await this._$ES;\n    } catch (e) {\n      Promise.reject(e);\n    }\n    const t = this.scheduleUpdate();\n    return t != null && await t, !this.isUpdatePending;\n  }\n  scheduleUpdate() {\n    return this.performUpdate();\n  }\n  performUpdate() {\n    var s;\n    if (!this.isUpdatePending)\n      return;\n    if (!this.hasUpdated) {\n      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {\n        for (const [o, n] of this._$Ep)\n          this[o] = n;\n        this._$Ep = void 0;\n      }\n      const r = this.constructor.elementProperties;\n      if (r.size > 0)\n        for (const [o, n] of r)\n          n.wrapped !== !0 || this._$AL.has(o) || this[o] === void 0 || this.P(o, this[o], n);\n    }\n    let t = !1;\n    const e = this._$AL;\n    try {\n      t = this.shouldUpdate(e), t ? (this.willUpdate(e), (s = this._$EO) == null || s.forEach((r) => {\n        var o;\n        return (o = r.hostUpdate) == null ? void 0 : o.call(r);\n      }), this.update(e)) : this._$EU();\n    } catch (r) {\n      throw t = !1, this._$EU(), r;\n    }\n    t && this._$AE(e);\n  }\n  willUpdate(t) {\n  }\n  _$AE(t) {\n    var e;\n    (e = this._$EO) == null || e.forEach((s) => {\n      var r;\n      return (r = s.hostUpdated) == null ? void 0 : r.call(s);\n    }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);\n  }\n  _$EU() {\n    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = !1;\n  }\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  getUpdateComplete() {\n    return this._$ES;\n  }\n  shouldUpdate(t) {\n    return !0;\n  }\n  update(t) {\n    this._$Ej && (this._$Ej = this._$Ej.forEach((e) => this._$EC(e, this[e]))), this._$EU();\n  }\n  updated(t) {\n  }\n  firstUpdated(t) {\n  }\n}\nE.elementStyles = [], E.shadowRootOptions = { mode: \"open\" }, E[U(\"elementProperties\")] = /* @__PURE__ */ new Map(), E[U(\"finalized\")] = /* @__PURE__ */ new Map(), Y == null || Y({ ReactiveElement: E }), (A.reactiveElementVersions ?? (A.reactiveElementVersions = [])).push(\"2.0.4\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst P = globalThis, k = P.trustedTypes, X = k ? k.createPolicy(\"lit-html\", { createHTML: (i) => i }) : void 0, ht = \"$lit$\", m = `lit$${(Math.random() + \"\").slice(9)}$`, at = \"?\" + m, Et = `<${at}>`, v = document, N = () => v.createComment(\"\"), R = (i) => i === null || typeof i != \"object\" && typeof i != \"function\", ct = Array.isArray, bt = (i) => ct(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == \"function\", j = `[ \t\n\\f\\r]`, w = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g, tt = /-->/g, et = />/g, y = RegExp(`>|${j}(?:([^\\\\s\"'>=/]+)(${j}*=${j}*(?:[^ \t\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`, \"g\"), st = /'/g, it = /\"/g, lt = /^(?:script|style|textarea|title)$/i, Ct = (i) => (t, ...e) => ({ _$litType$: i, strings: t, values: e }), wt = Ct(1), b = Symbol.for(\"lit-noChange\"), l = Symbol.for(\"lit-nothing\"), rt = /* @__PURE__ */ new WeakMap(), S = v.createTreeWalker(v, 129);\nfunction dt(i, t) {\n  if (!Array.isArray(i) || !i.hasOwnProperty(\"raw\"))\n    throw Error(\"invalid template strings array\");\n  return X !== void 0 ? X.createHTML(t) : t;\n}\nconst Ut = (i, t) => {\n  const e = i.length - 1, s = [];\n  let r, o = t === 2 ? \"<svg>\" : \"\", n = w;\n  for (let a = 0; a < e; a++) {\n    const h = i[a];\n    let d, u, c = -1, g = 0;\n    for (; g < h.length && (n.lastIndex = g, u = n.exec(h), u !== null); )\n      g = n.lastIndex, n === w ? u[1] === \"!--\" ? n = tt : u[1] !== void 0 ? n = et : u[2] !== void 0 ? (lt.test(u[2]) && (r = RegExp(\"</\" + u[2], \"g\")), n = y) : u[3] !== void 0 && (n = y) : n === y ? u[0] === \">\" ? (n = r ?? w, c = -1) : u[1] === void 0 ? c = -2 : (c = n.lastIndex - u[2].length, d = u[1], n = u[3] === void 0 ? y : u[3] === '\"' ? it : st) : n === it || n === st ? n = y : n === tt || n === et ? n = w : (n = y, r = void 0);\n    const f = n === y && i[a + 1].startsWith(\"/>\") ? \" \" : \"\";\n    o += n === w ? h + Et : c >= 0 ? (s.push(d), h.slice(0, c) + ht + h.slice(c) + m + f) : h + m + (c === -2 ? a : f);\n  }\n  return [dt(i, o + (i[e] || \"<?>\") + (t === 2 ? \"</svg>\" : \"\")), s];\n};\nclass I {\n  constructor({ strings: t, _$litType$: e }, s) {\n    let r;\n    this.parts = [];\n    let o = 0, n = 0;\n    const a = t.length - 1, h = this.parts, [d, u] = Ut(t, e);\n    if (this.el = I.createElement(d, s), S.currentNode = this.el.content, e === 2) {\n      const c = this.el.content.firstChild;\n      c.replaceWith(...c.childNodes);\n    }\n    for (; (r = S.nextNode()) !== null && h.length < a; ) {\n      if (r.nodeType === 1) {\n        if (r.hasAttributes())\n          for (const c of r.getAttributeNames())\n            if (c.endsWith(ht)) {\n              const g = u[n++], f = r.getAttribute(c).split(m), x = /([.?@])?(.*)/.exec(g);\n              h.push({ type: 1, index: o, name: x[2], strings: f, ctor: x[1] === \".\" ? Tt : x[1] === \"?\" ? Ot : x[1] === \"@\" ? Nt : z }), r.removeAttribute(c);\n            } else\n              c.startsWith(m) && (h.push({ type: 6, index: o }), r.removeAttribute(c));\n        if (lt.test(r.tagName)) {\n          const c = r.textContent.split(m), g = c.length - 1;\n          if (g > 0) {\n            r.textContent = k ? k.emptyScript : \"\";\n            for (let f = 0; f < g; f++)\n              r.append(c[f], N()), S.nextNode(), h.push({ type: 2, index: ++o });\n            r.append(c[g], N());\n          }\n        }\n      } else if (r.nodeType === 8)\n        if (r.data === at)\n          h.push({ type: 2, index: o });\n        else {\n          let c = -1;\n          for (; (c = r.data.indexOf(m, c + 1)) !== -1; )\n            h.push({ type: 7, index: o }), c += m.length - 1;\n        }\n      o++;\n    }\n  }\n  static createElement(t, e) {\n    const s = v.createElement(\"template\");\n    return s.innerHTML = t, s;\n  }\n}\nfunction C(i, t, e = i, s) {\n  var n, a;\n  if (t === b)\n    return t;\n  let r = s !== void 0 ? (n = e._$Co) == null ? void 0 : n[s] : e._$Cl;\n  const o = R(t) ? void 0 : t._$litDirective$;\n  return (r == null ? void 0 : r.constructor) !== o && ((a = r == null ? void 0 : r._$AO) == null || a.call(r, !1), o === void 0 ? r = void 0 : (r = new o(i), r._$AT(i, e, s)), s !== void 0 ? (e._$Co ?? (e._$Co = []))[s] = r : e._$Cl = r), r !== void 0 && (t = C(i, r._$AS(i, t.values), r, s)), t;\n}\nlet Pt = class {\n  constructor(t, e) {\n    this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;\n  }\n  get parentNode() {\n    return this._$AM.parentNode;\n  }\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n  u(t) {\n    const { el: { content: e }, parts: s } = this._$AD, r = ((t == null ? void 0 : t.creationScope) ?? v).importNode(e, !0);\n    S.currentNode = r;\n    let o = S.nextNode(), n = 0, a = 0, h = s[0];\n    for (; h !== void 0; ) {\n      if (n === h.index) {\n        let d;\n        h.type === 2 ? d = new M(o, o.nextSibling, this, t) : h.type === 1 ? d = new h.ctor(o, h.name, h.strings, this, t) : h.type === 6 && (d = new Rt(o, this, t)), this._$AV.push(d), h = s[++a];\n      }\n      n !== (h == null ? void 0 : h.index) && (o = S.nextNode(), n++);\n    }\n    return S.currentNode = v, r;\n  }\n  p(t) {\n    let e = 0;\n    for (const s of this._$AV)\n      s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;\n  }\n};\nclass M {\n  get _$AU() {\n    var t;\n    return ((t = this._$AM) == null ? void 0 : t._$AU) ?? this._$Cv;\n  }\n  constructor(t, e, s, r) {\n    this.type = 2, this._$AH = l, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = r, this._$Cv = (r == null ? void 0 : r.isConnected) ?? !0;\n  }\n  get parentNode() {\n    let t = this._$AA.parentNode;\n    const e = this._$AM;\n    return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;\n  }\n  get startNode() {\n    return this._$AA;\n  }\n  get endNode() {\n    return this._$AB;\n  }\n  _$AI(t, e = this) {\n    t = C(this, t, e), R(t) ? t === l || t == null || t === \"\" ? (this._$AH !== l && this._$AR(), this._$AH = l) : t !== this._$AH && t !== b && this._(t) : t._$litType$ !== void 0 ? this.$(t) : t.nodeType !== void 0 ? this.T(t) : bt(t) ? this.k(t) : this._(t);\n  }\n  S(t) {\n    return this._$AA.parentNode.insertBefore(t, this._$AB);\n  }\n  T(t) {\n    this._$AH !== t && (this._$AR(), this._$AH = this.S(t));\n  }\n  _(t) {\n    this._$AH !== l && R(this._$AH) ? this._$AA.nextSibling.data = t : this.T(v.createTextNode(t)), this._$AH = t;\n  }\n  $(t) {\n    var o;\n    const { values: e, _$litType$: s } = t, r = typeof s == \"number\" ? this._$AC(t) : (s.el === void 0 && (s.el = I.createElement(dt(s.h, s.h[0]), this.options)), s);\n    if (((o = this._$AH) == null ? void 0 : o._$AD) === r)\n      this._$AH.p(e);\n    else {\n      const n = new Pt(r, this), a = n.u(this.options);\n      n.p(e), this.T(a), this._$AH = n;\n    }\n  }\n  _$AC(t) {\n    let e = rt.get(t.strings);\n    return e === void 0 && rt.set(t.strings, e = new I(t)), e;\n  }\n  k(t) {\n    ct(this._$AH) || (this._$AH = [], this._$AR());\n    const e = this._$AH;\n    let s, r = 0;\n    for (const o of t)\n      r === e.length ? e.push(s = new M(this.S(N()), this.S(N()), this, this.options)) : s = e[r], s._$AI(o), r++;\n    r < e.length && (this._$AR(s && s._$AB.nextSibling, r), e.length = r);\n  }\n  _$AR(t = this._$AA.nextSibling, e) {\n    var s;\n    for ((s = this._$AP) == null ? void 0 : s.call(this, !1, !0, e); t && t !== this._$AB; ) {\n      const r = t.nextSibling;\n      t.remove(), t = r;\n    }\n  }\n  setConnected(t) {\n    var e;\n    this._$AM === void 0 && (this._$Cv = t, (e = this._$AP) == null || e.call(this, t));\n  }\n}\nclass z {\n  get tagName() {\n    return this.element.tagName;\n  }\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n  constructor(t, e, s, r, o) {\n    this.type = 1, this._$AH = l, this._$AN = void 0, this.element = t, this.name = e, this._$AM = r, this.options = o, s.length > 2 || s[0] !== \"\" || s[1] !== \"\" ? (this._$AH = Array(s.length - 1).fill(new String()), this.strings = s) : this._$AH = l;\n  }\n  _$AI(t, e = this, s, r) {\n    const o = this.strings;\n    let n = !1;\n    if (o === void 0)\n      t = C(this, t, e, 0), n = !R(t) || t !== this._$AH && t !== b, n && (this._$AH = t);\n    else {\n      const a = t;\n      let h, d;\n      for (t = o[0], h = 0; h < o.length - 1; h++)\n        d = C(this, a[s + h], e, h), d === b && (d = this._$AH[h]), n || (n = !R(d) || d !== this._$AH[h]), d === l ? t = l : t !== l && (t += (d ?? \"\") + o[h + 1]), this._$AH[h] = d;\n    }\n    n && !r && this.j(t);\n  }\n  j(t) {\n    t === l ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? \"\");\n  }\n}\nclass Tt extends z {\n  constructor() {\n    super(...arguments), this.type = 3;\n  }\n  j(t) {\n    this.element[this.name] = t === l ? void 0 : t;\n  }\n}\nclass Ot extends z {\n  constructor() {\n    super(...arguments), this.type = 4;\n  }\n  j(t) {\n    this.element.toggleAttribute(this.name, !!t && t !== l);\n  }\n}\nclass Nt extends z {\n  constructor(t, e, s, r, o) {\n    super(t, e, s, r, o), this.type = 5;\n  }\n  _$AI(t, e = this) {\n    if ((t = C(this, t, e, 0) ?? l) === b)\n      return;\n    const s = this._$AH, r = t === l && s !== l || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, o = t !== l && (s === l || r);\n    r && this.element.removeEventListener(this.name, this, s), o && this.element.addEventListener(this.name, this, t), this._$AH = t;\n  }\n  handleEvent(t) {\n    var e;\n    typeof this._$AH == \"function\" ? this._$AH.call(((e = this.options) == null ? void 0 : e.host) ?? this.element, t) : this._$AH.handleEvent(t);\n  }\n}\nclass Rt {\n  constructor(t, e, s) {\n    this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;\n  }\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n  _$AI(t) {\n    C(this, t);\n  }\n}\nconst B = P.litHtmlPolyfillSupport;\nB == null || B(I, M), (P.litHtmlVersions ?? (P.litHtmlVersions = [])).push(\"3.1.2\");\nconst It = (i, t, e) => {\n  const s = (e == null ? void 0 : e.renderBefore) ?? t;\n  let r = s._$litPart$;\n  if (r === void 0) {\n    const o = (e == null ? void 0 : e.renderBefore) ?? null;\n    s._$litPart$ = r = new M(t.insertBefore(N(), o), o, void 0, e ?? {});\n  }\n  return r._$AI(i), r;\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nlet T = class extends E {\n  constructor() {\n    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;\n  }\n  createRenderRoot() {\n    var e;\n    const t = super.createRenderRoot();\n    return (e = this.renderOptions).renderBefore ?? (e.renderBefore = t.firstChild), t;\n  }\n  update(t) {\n    const e = this.render();\n    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = It(e, this.renderRoot, this.renderOptions);\n  }\n  connectedCallback() {\n    var t;\n    super.connectedCallback(), (t = this._$Do) == null || t.setConnected(!0);\n  }\n  disconnectedCallback() {\n    var t;\n    super.disconnectedCallback(), (t = this._$Do) == null || t.setConnected(!1);\n  }\n  render() {\n    return b;\n  }\n};\nvar nt;\nT._$litElement$ = !0, T.finalized = !0, (nt = globalThis.litElementHydrateSupport) == null || nt.call(globalThis, { LitElement: T });\nconst G = globalThis.litElementPolyfillSupport;\nG == null || G({ LitElement: T });\n(globalThis.litElementVersions ?? (globalThis.litElementVersions = [])).push(\"4.0.4\");\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst Mt = (i) => (t, e) => {\n  e !== void 0 ? e.addInitializer(() => {\n    customElements.define(i, t);\n  }) : customElements.define(i, t);\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst xt = { attribute: !0, type: String, converter: L, reflect: !1, hasChanged: K }, Ht = (i = xt, t, e) => {\n  const { kind: s, metadata: r } = e;\n  let o = globalThis.litPropertyMetadata.get(r);\n  if (o === void 0 && globalThis.litPropertyMetadata.set(r, o = /* @__PURE__ */ new Map()), o.set(e.name, i), s === \"accessor\") {\n    const { name: n } = e;\n    return { set(a) {\n      const h = t.get.call(this);\n      t.set.call(this, a), this.requestUpdate(n, h, i);\n    }, init(a) {\n      return a !== void 0 && this.P(n, void 0, i), a;\n    } };\n  }\n  if (s === \"setter\") {\n    const { name: n } = e;\n    return function(a) {\n      const h = this[n];\n      t.call(this, a), this.requestUpdate(n, h, i);\n    };\n  }\n  throw Error(\"Unsupported decorator location: \" + s);\n};\nfunction _(i) {\n  return (t, e) => typeof e == \"object\" ? Ht(i, t, e) : ((s, r, o) => {\n    const n = r.hasOwnProperty(o);\n    return r.constructor.createProperty(o, n ? { ...s, wrapped: !0 } : s), n ? Object.getOwnPropertyDescriptor(r, o) : void 0;\n  })(i, t, e);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst Lt = (i) => i.strings === void 0;\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst kt = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 }, Dt = (i) => (...t) => ({ _$litDirective$: i, values: t });\nlet zt = class {\n  constructor(t) {\n  }\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n  _$AT(t, e, s) {\n    this._$Ct = t, this._$AM = e, this._$Ci = s;\n  }\n  _$AS(t, e) {\n    return this.update(t, e);\n  }\n  update(t, e) {\n    return this.render(...e);\n  }\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst O = (i, t) => {\n  var s;\n  const e = i._$AN;\n  if (e === void 0)\n    return !1;\n  for (const r of e)\n    (s = r._$AO) == null || s.call(r, t, !1), O(r, t);\n  return !0;\n}, D = (i) => {\n  let t, e;\n  do {\n    if ((t = i._$AM) === void 0)\n      break;\n    e = t._$AN, e.delete(i), i = t;\n  } while ((e == null ? void 0 : e.size) === 0);\n}, pt = (i) => {\n  for (let t; t = i._$AM; i = t) {\n    let e = t._$AN;\n    if (e === void 0)\n      t._$AN = e = /* @__PURE__ */ new Set();\n    else if (e.has(i))\n      break;\n    e.add(i), Bt(t);\n  }\n};\nfunction Yt(i) {\n  this._$AN !== void 0 ? (D(this), this._$AM = i, pt(this)) : this._$AM = i;\n}\nfunction jt(i, t = !1, e = 0) {\n  const s = this._$AH, r = this._$AN;\n  if (r !== void 0 && r.size !== 0)\n    if (t)\n      if (Array.isArray(s))\n        for (let o = e; o < s.length; o++)\n          O(s[o], !1), D(s[o]);\n      else\n        s != null && (O(s, !1), D(s));\n    else\n      O(this, i);\n}\nconst Bt = (i) => {\n  i.type == kt.CHILD && (i._$AP ?? (i._$AP = jt), i._$AQ ?? (i._$AQ = Yt));\n};\nclass Gt extends zt {\n  constructor() {\n    super(...arguments), this._$AN = void 0;\n  }\n  _$AT(t, e, s) {\n    super._$AT(t, e, s), pt(this), this.isConnected = t._$AU;\n  }\n  _$AO(t, e = !0) {\n    var s, r;\n    t !== this.isConnected && (this.isConnected = t, t ? (s = this.reconnected) == null || s.call(this) : (r = this.disconnected) == null || r.call(this)), e && (O(this, t), D(this));\n  }\n  setValue(t) {\n    if (Lt(this._$Ct))\n      this._$Ct._$AI(t, this);\n    else {\n      const e = [...this._$Ct._$AH];\n      e[this._$Ci] = t, this._$Ct._$AI(e, this, 0);\n    }\n  }\n  disconnected() {\n  }\n  reconnected() {\n  }\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst Wt = () => new Vt();\nclass Vt {\n}\nconst W = /* @__PURE__ */ new WeakMap(), qt = Dt(class extends Gt {\n  render(i) {\n    return l;\n  }\n  update(i, [t]) {\n    var s;\n    const e = t !== this.Y;\n    return e && this.Y !== void 0 && this.rt(void 0), (e || this.lt !== this.ct) && (this.Y = t, this.ht = (s = i.options) == null ? void 0 : s.host, this.rt(this.ct = i.element)), l;\n  }\n  rt(i) {\n    if (typeof this.Y == \"function\") {\n      const t = this.ht ?? globalThis;\n      let e = W.get(t);\n      e === void 0 && (e = /* @__PURE__ */ new WeakMap(), W.set(t, e)), e.get(this.Y) !== void 0 && this.Y.call(this.ht, void 0), e.set(this.Y, i), i !== void 0 && this.Y.call(this.ht, i);\n    } else\n      this.Y.value = i;\n  }\n  get lt() {\n    var i, t;\n    return typeof this.Y == \"function\" ? (i = W.get(this.ht ?? globalThis)) == null ? void 0 : i.get(this.Y) : (t = this.Y) == null ? void 0 : t.value;\n  }\n  disconnected() {\n    this.lt === this.ct && this.rt(void 0);\n  }\n  reconnected() {\n    this.rt(this.ct);\n  }\n});\nvar Kt = Object.defineProperty, Jt = Object.getOwnPropertyDescriptor, $ = (i, t, e, s) => {\n  for (var r = s > 1 ? void 0 : s ? Jt(t, e) : t, o = i.length - 1, n; o >= 0; o--)\n    (n = i[o]) && (r = (s ? n(t, e, r) : n(r)) || r);\n  return s && r && Kt(t, e, r), r;\n};\nfunction Ft(i) {\n  return customElements.get(i) ? (t) => t : Mt(i);\n}\nlet p = class extends T {\n  constructor() {\n    super(), this.GISCUS_SESSION_KEY = \"giscus-session\", this.GISCUS_DEFAULT_HOST = \"https://giscus.app\", this.ERROR_SUGGESTION = \"Please consider reporting this error at https://github.com/giscus/giscus/issues/new.\", this.__session = \"\", this._iframeRef = Wt(), this.messageEventHandler = this.handleMessageEvent.bind(this), this.hasLoaded = !1, this.host = this.GISCUS_DEFAULT_HOST, this.strict = \"0\", this.reactionsEnabled = \"1\", this.emitMetadata = \"0\", this.inputPosition = \"bottom\", this.theme = \"light\", this.lang = \"en\", this.loading = \"eager\", this.setupSession(), window.addEventListener(\"message\", this.messageEventHandler);\n  }\n  get iframeRef() {\n    var i;\n    return (i = this._iframeRef) == null ? void 0 : i.value;\n  }\n  get _host() {\n    try {\n      return new URL(this.host), this.host;\n    } catch {\n      return this.GISCUS_DEFAULT_HOST;\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback(), window.removeEventListener(\"message\", this.messageEventHandler);\n  }\n  _formatError(i) {\n    return `[giscus] An error occurred. Error message: \"${i}\".`;\n  }\n  setupSession() {\n    const i = location.href, t = new URL(i), e = localStorage.getItem(this.GISCUS_SESSION_KEY), s = t.searchParams.get(\"giscus\") ?? \"\";\n    if (this.__session = \"\", s) {\n      localStorage.setItem(this.GISCUS_SESSION_KEY, JSON.stringify(s)), this.__session = s, t.searchParams.delete(\"giscus\"), t.hash = \"\", history.replaceState(void 0, document.title, t.toString());\n      return;\n    }\n    if (e)\n      try {\n        this.__session = JSON.parse(e);\n      } catch (r) {\n        localStorage.removeItem(this.GISCUS_SESSION_KEY), console.warn(\n          `${this._formatError(\n            r == null ? void 0 : r.message\n          )} Session has been cleared.`\n        );\n      }\n  }\n  signOut() {\n    localStorage.removeItem(this.GISCUS_SESSION_KEY), this.__session = \"\", this.update(/* @__PURE__ */ new Map());\n  }\n  handleMessageEvent(i) {\n    if (i.origin !== this._host)\n      return;\n    const { data: t } = i;\n    if (!(typeof t == \"object\" && t.giscus))\n      return;\n    if (this.iframeRef && t.giscus.resizeHeight && (this.iframeRef.style.height = `${t.giscus.resizeHeight}px`), t.giscus.signOut) {\n      console.info(\"[giscus] User has logged out. Session has been cleared.\"), this.signOut();\n      return;\n    }\n    if (!t.giscus.error)\n      return;\n    const e = t.giscus.error;\n    if (e.includes(\"Bad credentials\") || e.includes(\"Invalid state value\") || e.includes(\"State has expired\")) {\n      if (localStorage.getItem(this.GISCUS_SESSION_KEY) !== null) {\n        console.warn(`${this._formatError(e)} Session has been cleared.`), this.signOut();\n        return;\n      }\n      console.error(\n        `${this._formatError(e)} No session is stored initially. ${this.ERROR_SUGGESTION}`\n      );\n    }\n    if (e.includes(\"Discussion not found\")) {\n      console.warn(\n        `[giscus] ${e}. A new discussion will be created if a comment/reaction is submitted.`\n      );\n      return;\n    }\n    console.error(`${this._formatError(e)} ${this.ERROR_SUGGESTION}`);\n  }\n  sendMessage(i) {\n    var t;\n    !((t = this.iframeRef) != null && t.contentWindow) || !this.hasLoaded || this.iframeRef.contentWindow.postMessage({ giscus: i }, this._host);\n  }\n  updateConfig() {\n    const i = {\n      setConfig: {\n        repo: this.repo,\n        repoId: this.repoId,\n        category: this.category,\n        categoryId: this.categoryId,\n        term: this.getTerm(),\n        number: +this.getNumber(),\n        strict: this.strict === \"1\",\n        reactionsEnabled: this.reactionsEnabled === \"1\",\n        emitMetadata: this.emitMetadata === \"1\",\n        inputPosition: this.inputPosition,\n        theme: this.theme,\n        lang: this.lang\n      }\n    };\n    this.sendMessage(i);\n  }\n  firstUpdated() {\n    var i;\n    (i = this.iframeRef) == null || i.addEventListener(\"load\", () => {\n      var t;\n      (t = this.iframeRef) == null || t.classList.remove(\"loading\"), this.hasLoaded = !0, this.updateConfig();\n    });\n  }\n  requestUpdate(i, t, e) {\n    if (!this.hasUpdated || i === \"host\") {\n      super.requestUpdate(i, t, e);\n      return;\n    }\n    this.updateConfig();\n  }\n  getMetaContent(i, t = !1) {\n    const e = t ? `meta[property='og:${i}'],` : \"\", s = document.querySelector(\n      e + `meta[name='${i}']`\n    );\n    return s ? s.content : \"\";\n  }\n  _getCleanedUrl() {\n    const i = new URL(location.href);\n    return i.searchParams.delete(\"giscus\"), i.hash = \"\", i;\n  }\n  getTerm() {\n    switch (this.mapping) {\n      case \"url\":\n        return this._getCleanedUrl().toString();\n      case \"title\":\n        return document.title;\n      case \"og:title\":\n        return this.getMetaContent(\"title\", !0);\n      case \"specific\":\n        return this.term ?? \"\";\n      case \"number\":\n        return \"\";\n      case \"pathname\":\n      default:\n        return location.pathname.length < 2 ? \"index\" : location.pathname.substring(1).replace(/\\.\\w+$/, \"\");\n    }\n  }\n  getNumber() {\n    return this.mapping === \"number\" ? this.term ?? \"\" : \"\";\n  }\n  getIframeSrc() {\n    const i = this._getCleanedUrl().toString(), t = `${i}${this.id ? \"#\" + this.id : \"\"}`, e = this.getMetaContent(\"description\", !0), s = this.getMetaContent(\"giscus:backlink\") || i, r = {\n      origin: t,\n      session: this.__session,\n      repo: this.repo,\n      repoId: this.repoId ?? \"\",\n      category: this.category ?? \"\",\n      categoryId: this.categoryId ?? \"\",\n      term: this.getTerm(),\n      number: this.getNumber(),\n      strict: this.strict,\n      reactionsEnabled: this.reactionsEnabled,\n      emitMetadata: this.emitMetadata,\n      inputPosition: this.inputPosition,\n      theme: this.theme,\n      description: e,\n      backLink: s\n    }, o = this._host, n = this.lang ? `/${this.lang}` : \"\", a = new URLSearchParams(r);\n    return `${o}${n}/widget?${a.toString()}`;\n  }\n  render() {\n    return wt`\n      <iframe\n        title=\"Comments\"\n        scrolling=\"no\"\n        class=\"loading\"\n        ${qt(this._iframeRef)}\n        src=${this.getIframeSrc()}\n        loading=${this.loading}\n        allow=\"clipboard-write\"\n        part=\"iframe\"\n      ></iframe>\n    `;\n  }\n};\np.styles = $t`\n    :host,\n    iframe {\n      width: 100%;\n      border: none;\n      min-height: 150px;\n      color-scheme: light dark;\n    }\n\n    iframe.loading {\n      opacity: 0;\n    }\n  `;\n$([\n  _({ reflect: !0 })\n], p.prototype, \"host\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"repo\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"repoId\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"category\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"categoryId\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"mapping\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"term\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"strict\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"reactionsEnabled\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"emitMetadata\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"inputPosition\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"theme\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"lang\", 2);\n$([\n  _({ reflect: !0 })\n], p.prototype, \"loading\", 2);\np = $([\n  Ft(\"giscus-widget\")\n], p);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@giscus/react/dist/giscus-BNK3dBIH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@giscus/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@giscus/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ G)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction G({ id: e, host: i, repo: r, repoId: o, category: u, categoryId: n, mapping: s, term: a, strict: f, reactionsEnabled: d, emitMetadata: m, inputPosition: c, theme: p, lang: l, loading: g }) {\n  const [t, x] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    t || (__webpack_require__.e(/*! import() */ \"vendor-chunks/@giscus\").then(__webpack_require__.bind(__webpack_require__, /*! ./giscus-BNK3dBIH.js */ \"(ssr)/./node_modules/@giscus/react/dist/giscus-BNK3dBIH.js\")), x(!0));\n  }, []), t ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"giscus-widget\", { id: e, host: i, repo: r, repoid: o, category: u, categoryid: n, mapping: s, term: a, strict: f, reactionsenabled: d, emitmetadata: m, inputposition: c, theme: p, lang: l, loading: g }) : null;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdpc2N1cy9yZWFjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTZDO0FBQ1M7QUFDdEQsYUFBYSx1TEFBdUw7QUFDcE0saUJBQWlCLCtDQUFDO0FBQ2xCLFNBQVMsZ0RBQUM7QUFDVixVQUFVLDRNQUE4QjtBQUN4QyxHQUFHLFdBQVcsc0RBQUMsb0JBQW9CLHVMQUF1TDtBQUMxTjtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy9AZ2lzY3VzL3JlYWN0L2Rpc3QvaW5kZXguanM/NGIzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc3ggYXMgYiB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgdXNlU3RhdGUgYXMgaiwgdXNlRWZmZWN0IGFzIHcgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIEcoeyBpZDogZSwgaG9zdDogaSwgcmVwbzogciwgcmVwb0lkOiBvLCBjYXRlZ29yeTogdSwgY2F0ZWdvcnlJZDogbiwgbWFwcGluZzogcywgdGVybTogYSwgc3RyaWN0OiBmLCByZWFjdGlvbnNFbmFibGVkOiBkLCBlbWl0TWV0YWRhdGE6IG0sIGlucHV0UG9zaXRpb246IGMsIHRoZW1lOiBwLCBsYW5nOiBsLCBsb2FkaW5nOiBnIH0pIHtcbiAgY29uc3QgW3QsIHhdID0gaighMSk7XG4gIHJldHVybiB3KCgpID0+IHtcbiAgICB0IHx8IChpbXBvcnQoXCIuL2dpc2N1cy1CTkszZEJJSC5qc1wiKSwgeCghMCkpO1xuICB9LCBbXSksIHQgPyBiKFwiZ2lzY3VzLXdpZGdldFwiLCB7IGlkOiBlLCBob3N0OiBpLCByZXBvOiByLCByZXBvaWQ6IG8sIGNhdGVnb3J5OiB1LCBjYXRlZ29yeWlkOiBuLCBtYXBwaW5nOiBzLCB0ZXJtOiBhLCBzdHJpY3Q6IGYsIHJlYWN0aW9uc2VuYWJsZWQ6IGQsIGVtaXRtZXRhZGF0YTogbSwgaW5wdXRwb3NpdGlvbjogYywgdGhlbWU6IHAsIGxhbmc6IGwsIGxvYWRpbmc6IGcgfSkgOiBudWxsO1xufVxuZXhwb3J0IHtcbiAgRyBhcyBkZWZhdWx0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@giscus/react/dist/index.js\n");

/***/ })

};
;